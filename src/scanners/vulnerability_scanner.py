"""
Vulnerability Scanner
Handles vulnerability scanning tools
"""

from pathlib import Path
from typing import Dict, List, Any, Optional
from .base_scanner import BaseScanner


class VulnerabilityScanner(BaseScanner):
    """Scanner for vulnerability detection"""

    def scan(self, project_dirs: Optional[List[Path]] = None) -> Dict[str, Any]:
        """Scan for vulnerabilities"""
        results = {'grype': []}

        if not self.tools['grype']:
            print("⚠️  Grype not available - skipping vulnerability scan")
            return results

        print("🔍 Scanning for vulnerabilities with Grype...")

        # Scan the project directory
        cmd = ['grype', '.', '-o', 'json']
        _, stdout, stderr = self.run_command(cmd)

        if stdout:
            data = self._parse_json_output(stdout)
            if data:
                results['grype'].append({
                    'project': str(self.target_dir),
                    'data': data,
                    'matches_count': len(data.get('matches', [])),
                    'severity_breakdown': self._count_vulnerabilities_by_severity(data.get('matches', []))  # pylint: disable=C0301
                })
                print(f"  ✅ Found {len(data.get('matches', []))} vulnerabilities")
            else:
                results['grype'].append({
                    'project': str(self.target_dir),
                    'error': 'Failed to parse Grype output',
                    'raw_output': stdout[:500]
                })
                print("  ❌ Failed to parse Grype output")
        else:
            results['grype'].append({
                'project': str(self.target_dir),
                'error': 'Grype command failed',
                'stderr': stderr
            })
            print(f"  ❌ Grype command failed: {stderr}")

        return results

    def _count_vulnerabilities_by_severity(self, matches: List[Dict]) -> Dict[str, int]:
        """Count vulnerabilities by severity level"""
        severity_counts = {'Critical': 0, 'High': 0, 'Medium': 0, 'Low': 0, 'Negligible': 0}
        for match in matches:
            severity = match.get('vulnerability', {}).get('severity', 'Unknown')
            if severity in severity_counts:
                severity_counts[severity] += 1
        return severity_counts
