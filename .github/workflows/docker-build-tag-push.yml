name: Build, Tag, and Push Docker Image

on:
  push:
    branches:
      - '**'
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force rebuild all platforms'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: devscrub
  DOCKER_BUILDKIT: 1

# Define workflow permissions
permissions:
  contents: read
  packages: write

# Prevent multiple builds from running simultaneously
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-strategy:
    runs-on: ubuntu-latest
    outputs:
      platforms: ${{ steps.strategy.outputs.platforms }}
      tags: ${{ steps.tags.outputs.tags }}
      version: ${{ steps.version.outputs.version }}
      build_date: ${{ steps.version.outputs.build_date }}
      git_sha: ${{ steps.version.outputs.git_sha }}
      git_ref: ${{ steps.version.outputs.git_ref }}
      branch_name: ${{ steps.branch.outputs.branch_name }}
    steps:
      - uses: actions/checkout@v4
      - name: Extract branch name
        id: branch
        run: |
          BRANCH=${GITHUB_REF##*/}
          echo "branch_name=$BRANCH" >> $GITHUB_OUTPUT
          echo "Branch name: $BRANCH"
      - name: Extract version and metadata
        id: version
        run: |
          # Handle missing VERSION file gracefully
          if [ -f VERSION ]; then
            VERSION=$(cat VERSION | tr -d ' \n')
          else
            VERSION="dev-$(date +%Y%m%d)"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "build_date=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT
          echo "git_sha=${{ github.sha }}" >> $GITHUB_OUTPUT
          echo "git_ref=${{ github.ref }}" >> $GITHUB_OUTPUT
      - name: Determine build strategy
        id: strategy
        run: |
          BRANCH=${GITHUB_REF##*/}
          if [[ "$BRANCH" == "main" ]]; then
            echo 'platforms=["linux/amd64","linux/arm64"]' >> $GITHUB_OUTPUT
            echo "Selected platforms for main branch: linux/amd64, linux/arm64"
          else
            echo 'platforms=["linux/amd64"]' >> $GITHUB_OUTPUT
            echo "Selected platforms for feature branch: linux/amd64"
          fi
      - name: Set Docker tags
        id: tags
        run: |
          BRANCH=${GITHUB_REF##*/}
          REPO_OWNER=${{ github.repository_owner }}
          IMAGE_BASE="${{ env.REGISTRY }}/${REPO_OWNER}/${{ env.IMAGE_NAME }}"
          
          # Always create a tag with the branch name
          TAGS="${IMAGE_BASE}:${BRANCH}"
          
          # Add latest tag only for main branch
          if [ "$BRANCH" = "main" ]; then
            TAGS="${TAGS},${IMAGE_BASE}:latest"
          fi
          
          echo "tags=$TAGS" >> $GITHUB_OUTPUT
          echo "Generated tags: $TAGS"

  build:
    needs: [build-strategy]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform: ${{ fromJson(needs.build-strategy.outputs.platforms) }}
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}-${{ matrix.platform }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ github.sha }}-
            ${{ runner.os }}-buildx-
      - name: Debug build environment
        run: |
          echo "üîç Building for branch: ${{ needs.build-strategy.outputs.branch_name }}"
          echo "üîç Platform: ${{ matrix.platform }}"
          echo "üîç Tags: ${{ needs.build-strategy.outputs.tags }}"
          echo "Build args:"
          echo "  VERSION: ${{ needs.build-strategy.outputs.version }}"
          echo "  BUILD_DATE: ${{ needs.build-strategy.outputs.build_date }}"
          echo "  GIT_SHA: ${{ needs.build-strategy.outputs.git_sha }}"
          echo "  GIT_REF: ${{ needs.build-strategy.outputs.git_ref }}"
          
          # Check if Dockerfile exists
          if [ -f Dockerfile ]; then
            echo "‚úÖ Dockerfile found"
          else
            echo "‚ùå Dockerfile not found!"
            exit 1
          fi
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: ${{ matrix.platform }}
          push: true
          tags: ${{ needs.build-strategy.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          build-args: |
            VERSION=${{ needs.build-strategy.outputs.version }}
            BUILD_DATE=${{ needs.build-strategy.outputs.build_date }}
            GIT_SHA=${{ needs.build-strategy.outputs.git_sha }}
            GIT_REF=${{ needs.build-strategy.outputs.git_ref }}
          provenance: true
          sbom: true
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
        if: always()

  verify:
    needs: [build-strategy, build]
    if: needs.build.result == 'success'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform: ${{ fromJson(needs.build-strategy.outputs.platforms) }}
    permissions:
      packages: read
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Verify image
        run: |
          echo "Verifying image for platform: ${{ matrix.platform }}"
          
          BRANCH="${{ needs.build-strategy.outputs.branch_name }}"
          IMAGE_TAG="${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${BRANCH}"
          
          echo "Testing image: $IMAGE_TAG"
          
          # Pull the built image
          docker pull --platform ${{ matrix.platform }} $IMAGE_TAG
          
          # Test basic functionality by overriding entrypoint
          docker run --rm --platform ${{ matrix.platform }} --entrypoint sh $IMAGE_TAG -c "echo 'Container test successful'"
          
          # Test specific tools if they exist (with error handling)
          echo "Testing available tools..."
          docker run --rm --platform ${{ matrix.platform }} --entrypoint sh $IMAGE_TAG -c "command -v python && python --version || echo 'Python not available'"
          docker run --rm --platform ${{ matrix.platform }} --entrypoint sh $IMAGE_TAG -c "command -v node && node --version || echo 'Node not available'"
          
          echo "‚úÖ Image verification successful for ${{ matrix.platform }}"

  manifest:
    needs: [build-strategy, build, verify]
    if: needs.build.result == 'success' && needs.build-strategy.outputs.branch_name == 'main'
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Create multi-arch manifest
        run: |
          echo "Creating multi-architecture manifest for main branch..."
          
          REPO_OWNER=${{ github.repository_owner }}
          IMAGE_BASE="${{ env.REGISTRY }}/${REPO_OWNER}/${{ env.IMAGE_NAME }}"
          
          # Check if we built multiple platforms
          PLATFORMS='${{ needs.build-strategy.outputs.platforms }}'
          if echo "$PLATFORMS" | grep -q "linux/arm64"; then
            echo "Creating multi-arch manifest for platforms: $PLATFORMS"
            
            # The images should already be pushed with the correct tags
            # Docker will automatically create the manifest when we push with multiple platforms
            echo "‚úÖ Multi-arch images already pushed with correct manifests"
          else
            echo "Single platform build, no additional manifest needed"
          fi

  notify:
    needs: [build-strategy, build, verify, manifest]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Build status
        run: |
          echo "=== Build Summary ==="
          echo "Branch: ${{ needs.build-strategy.outputs.branch_name }}"
          echo "Build result: ${{ needs.build.result }}"
          echo "Verify result: ${{ needs.verify.result }}"
          echo "Manifest result: ${{ needs.manifest.result }}"
          
          if [ "${{ needs.build.result }}" = "success" ]; then
            echo "‚úÖ Build completed successfully!"
            echo "üì¶ Images pushed to: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}"
            echo "üè∑Ô∏è  Branch tag: ${{ needs.build-strategy.outputs.branch_name }}"
            if [ "${{ needs.build-strategy.outputs.branch_name }}" = "main" ]; then
              echo "üè∑Ô∏è  Latest tag: latest"
            fi
            echo "üîó Registry: https://github.com/${{ github.repository_owner }}/${{ github.repository }}/pkgs/container/${{ env.IMAGE_NAME }}"
          else
            echo "‚ùå Build failed!"
            echo "Please check the build logs for detailed error information."
            if [ "${{ needs.build.result }}" = "failure" ]; then
              exit 1
            fi
          fi