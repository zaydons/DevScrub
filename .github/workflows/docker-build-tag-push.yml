name: Build, Tag, and Push Docker Image

on:
  push:
    branches:
      - '**'
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force rebuild all platforms'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: devscrub
  DOCKER_BUILDKIT: 1

# Prevent multiple builds from running simultaneously
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      docker: ${{ steps.filter.outputs.docker }}
      python: ${{ steps.filter.outputs.python }}
      node: ${{ steps.filter.outputs.node }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            docker:
              - 'Dockerfile'
              - 'docker-compose.yml'
              - '.dockerignore'
            python:
              - 'requirements.txt'
              - 'src/**/*.py'
              - 'scripts/**/*.py'
            node:
              - 'package.json'
              - 'package-lock.json'
              - 'yarn.lock'
              - 'src/**/*.js'
              - 'src/**/*.ts'

  build-strategy:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.docker == 'true' || needs.changes.outputs.python == 'true' || needs.changes.outputs.node == 'true' || github.event.inputs.force_rebuild == 'true'
    outputs:
      platforms: ${{ steps.strategy.outputs.platforms }}
      tags: ${{ steps.tags.outputs.tags }}
      version: ${{ steps.version.outputs.version }}
      build_args: ${{ steps.build_args.outputs.build_args }}
    steps:
      - uses: actions/checkout@v4
      - name: Extract version and metadata
        id: version
        run: |
          VERSION=$(cat VERSION | tr -d ' \n')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "build_date=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT
          echo "git_sha=${{ github.sha }}" >> $GITHUB_OUTPUT
          echo "git_ref=${{ github.ref }}" >> $GITHUB_OUTPUT
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      - name: Determine build strategy
        id: strategy
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]] || [[ "${{ github.event_name }}" == "release" ]]; then
            echo 'platforms=["linux/amd64","linux/arm64"]' >> $GITHUB_OUTPUT
            echo "Selected platforms: linux/amd64, linux/arm64"
          else
            echo 'platforms=["linux/amd64"]' >> $GITHUB_OUTPUT
            echo "Selected platforms: linux/amd64"
          fi
      - name: Set Docker tags
        id: tags
        run: |
          BRANCH=${GITHUB_REF##*/}
          TAGS="${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:$BRANCH"
          if [ "$BRANCH" = "main" ]; then
            TAGS="$TAGS,${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest"
          fi
          if [ "${{ github.event_name }}" = "release" ]; then
            TAGS="$TAGS,${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}"
          fi
          echo "tags=$TAGS" >> $GITHUB_OUTPUT
      - name: Prepare build arguments
        id: build_args
        run: |
          BUILD_ARGS="VERSION=${{ env.VERSION }}"
          BUILD_ARGS="$BUILD_ARGS,BUILD_DATE=${{ steps.version.outputs.build_date }}"
          BUILD_ARGS="$BUILD_ARGS,GIT_SHA=${{ steps.version.outputs.git_sha }}"
          BUILD_ARGS="$BUILD_ARGS,GIT_REF=${{ steps.version.outputs.git_ref }}"
          BUILD_ARGS="$BUILD_ARGS,TARGETPLATFORM=\$TARGETPLATFORM"
          echo "build_args=$BUILD_ARGS" >> $GITHUB_OUTPUT

  build:
    needs: [changes, build-strategy]
    if: needs.changes.outputs.docker == 'true' || needs.changes.outputs.python == 'true' || needs.changes.outputs.node == 'true' || github.event.inputs.force_rebuild == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: ${{ fromJson(needs.build-strategy.outputs.platforms) }}
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:v0.12.0
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}-${{ matrix.platform }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ github.sha }}-
            ${{ runner.os }}-buildx-
      - name: Build and push
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: ${{ matrix.platform }}
          push: true
          tags: ${{ needs.build-strategy.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          build-args: ${{ needs.build-strategy.outputs.build_args }}
          provenance: true
          sbom: true
        continue-on-error: true
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
        continue-on-error: true
      - name: Verify build success
        if: steps.build.outcome == 'failure'
        run: |
          echo "❌ Build failed for platform: ${{ matrix.platform }}"
          echo "Check the build logs above for details"
          exit 1

  verify:
    needs: [build-strategy, build]
    if: always() && needs.build.result == 'success'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: ${{ fromJson(needs.build-strategy.outputs.platforms) }}
    permissions:
      packages: read
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Verify image functionality
        run: |
          echo "Verifying image for platform: ${{ matrix.platform }}"
          
          # Get the branch name for the tag
          BRANCH=${GITHUB_REF##*/}
          
          # Pull the built image using the branch tag
          docker pull ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:$BRANCH
          
          # Test basic functionality
          docker run --rm ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:$BRANCH python --version
          docker run --rm ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:$BRANCH node --version
          
          echo "✅ Image verification successful for ${{ matrix.platform }}"

  manifest:
    needs: [build-strategy, build]
    if: |
      (github.ref == 'refs/heads/main' || github.event_name == 'release') &&
      (contains(needs.build-strategy.outputs.platforms, 'linux/arm64'))
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Create and push manifest
        run: |
          echo "Creating multi-architecture manifest..."
          docker buildx imagetools create -t ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ needs.build-strategy.outputs.version }} \
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:amd64@$(docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:amd64 --format '{{.Manifest.Digest}}') \
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:arm64@$(docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:arm64 --format '{{.Manifest.Digest}}')
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            docker buildx imagetools create -t ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest \
              ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:amd64@$(docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:amd64 --format '{{.Manifest.Digest}}') \
              ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:arm64@$(docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:arm64 --format '{{.Manifest.Digest}}')
          fi

  tag:
    needs: [build-strategy, build, manifest]
    if: always() && needs.build.result == 'success'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Set up git
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
      - name: Create tags
        run: |
          BRANCH=${GITHUB_REF##*/}
          VERSION=${{ needs.build-strategy.outputs.version }}
          git tag -f "$BRANCH"
          git tag -f "v$VERSION"
          if [ "$BRANCH" = "main" ]; then
            git tag -f latest
          fi
          git push origin --tags --force

  notify:
    needs: [build-strategy, build, verify, tag]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Build status
        run: |
          if [ "${{ needs.build.result }}" = "success" ] && [ "${{ needs.verify.result }}" = "success" ]; then
            echo "✅ Build completed successfully!"
            echo "📦 Images pushed to: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}"
            echo "🏷️  Tags created for version: ${{ needs.build-strategy.outputs.version }}"
          else
            echo "❌ Build failed!"
            echo "Build result: ${{ needs.build.result }}"
            echo "Verify result: ${{ needs.verify.result }}"
            exit 1
          fi 